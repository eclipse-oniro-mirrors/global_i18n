# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")

idl_gen_interface("i18n_service_interface") {
  src_idl = rebase_path("II18nServiceAbility.idl")
  log_domainid = "0xD001E00"
  log_tag = "GLOBAL_I18N"
}

group("i18n_service_ability") {
  deps = [
    ":i18n_sa",
    ":i18n_sa_client",
    "./etc:i18n_sa_etc",
  ]
}

config("I18n_service_public_config") {
  include_dirs = [
    "${target_gen_dir}",
    "./include",
    "../frameworks/intl/include",
  ]
}

ohos_shared_library("i18n_sa_client") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [
    "./src/i18n_service_ability_client.cpp",
    "./src/i18n_service_ability_load_callback.cpp",
    "./src/i18n_service_ability_load_manager.cpp",
  ]
  output_values = get_target_outputs(":i18n_service_interface")
  sources += filter_include(output_values, [ "*_proxy.cpp" ])
  public_configs = [ ":I18n_service_public_config" ]
  deps = [ ":i18n_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
  if (target_platform == "watch") {
    defines = [ "DEVICE_WATCH" ]
  }
  innerapi_tags = [ "platformsdk" ]
  part_name = "i18n"
  subsystem_name = "global"
}

ohos_shared_library("i18n_sa") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [
    "./src/i18n_service_ability.cpp",
    "./src/i18n_service_event.cpp",
  ]
  output_values = get_target_outputs(":i18n_service_interface")
  sources += filter_include(output_values, [ "*_stub.cpp" ])
  include_dirs = [
    "${target_gen_dir}",
    "./include",
    "../frameworks/intl/include",
    "../interfaces/native/inner_api/preferred_language/include",
  ]
  deps = [
    ":i18n_sa_client",
    ":i18n_service_interface",
    "../frameworks/intl:intl_util",
    "../frameworks/intl:preferred_language",
  ]
  if (target_platform == "pc") {
    defines = [ "SUPPORT_MULTI_USER" ]
  }
  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "ipc:ipc_core",
    "memmgr:memmgrclient",
    "openssl:libcrypto_shared",
    "openssl:libssl_shared",
    "os_account:os_account_innerkits",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  part_name = "i18n"
  subsystem_name = "global"
}
